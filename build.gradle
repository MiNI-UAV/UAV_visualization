import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id("io.freefair.lombok") version "8.1.0"
    id 'edu.sc.seis.launch4j' version '3.0.4'
}

application {
    mainClass = 'org.uav.UavVisualization'
}

group 'org.uav'
version '0.4.0'

repositories {
    mavenCentral()
}

shadowJar{
    archiveFileName = "MiniUAV.jar"
}

launch4j {
    outfile = 'Mini UAV.exe'
    mainClassName = application.mainClass
    icon = "${projectDir}/icon.ico"
    jarTask = project.tasks.shadowJar
}

project.ext.lwjglVersion = "3.3.1"

def os = DefaultNativePlatform.getCurrentOperatingSystem()
if(os.isLinux()) {
    project.ext.lwjglNatives = "natives-linux"
    def osArch = System.getProperty("os.arch")
    if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
        project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
    } else if (osArch.startsWith("ppc")) {
        project.ext.lwjglNatives += "-ppc64le"
    } else if (osArch.startsWith("riscv")) {
        project.ext.lwjglNatives += "-riscv64"
    }
}
if(os.isMacOsX())
    project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
if(os.isWindows()) {
    def osArch = System.getProperty("os.arch")
    project.ext.lwjglNatives = osArch.contains("64")
            ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
            : "natives-windows-x86"
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "de.javagl:jgltf-model:2.0.3"
    implementation "org.zeromq:jeromq:0.5.3"
    implementation "org.joml:joml:1.10.5"
    implementation 'org.json:json:20230618'
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'org.apache.commons:commons-compress:1.23.0'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'com.fasterxml.woodstox:woodstox-core:6.5.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'javazoom:jlayer:1.0.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // LWJGL
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-bgfx"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nanovg"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
}

tasks.register('printVersion') {
    println "${version}"
}

test {
    useJUnitPlatform()
}
